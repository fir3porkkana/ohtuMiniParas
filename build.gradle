plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'com.github.johnrengelman.shadow' version '5.1.0'

}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: "jacoco"

mainClassName = 'ohtu.Main'

javafx {
    version = '11'
    modules = [ 'javafx.base','javafx.controls','javafx.graphics', 'javafx.fxml', 'javafx.media' ]
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile "org.testfx:testfx-core:4.0.+"
    testCompile "org.testfx:testfx-junit:4.0.+"    
    testCompile "org.testfx:openjfx-monocle:jdk-11+26"
    compile group:'org.xerial', name:'sqlite-jdbc', version:'3.8.11.2'
    compile group: "com.mpatric", name: "mp3agic", version: "0.9.1"
}

jar {
    manifest {
        attributes 'Main-Class': 'ohtu.Main'
    }
}

test {
  // set a system property for the test JVM(s)
  systemProperty 'testfx.robot', 'glass'
  systemProperty 'testfx.headless', 'true' // set false to see test running
  systemProperty 'prism.order', 'sw'
  systemProperty 'prism.text', 't2k'
  systemProperty 'java.awt.headless', 'true'

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
     logger.lifecycle("Running test: " + descriptor)
  }

  // Fail the 'test' task on the first test failure
  failFast = true

  // listen to standard out and standard error of the test JVM(s)
  onOutput { descriptor, event ->
     logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
  }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['ohtu/Main.*', "ohtu/GUIStarter.*"])
        })
    }

}
